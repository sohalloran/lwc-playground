import { GetRootNodeOptions } from "./traverse";
export declare function isDelegatingFocus(host: HTMLElement): boolean;
export declare function getHost(root: SyntheticShadowRootInterface): HTMLElement;
export declare function getShadowRoot(elm: HTMLElement): SyntheticShadowRootInterface;
export declare function attachShadow(elm: HTMLElement, options: ShadowRootInit): SyntheticShadowRootInterface;
export declare enum ShadowRootMode {
    CLOSED = "closed",
    OPEN = "open"
}
export interface SyntheticShadowRootInterface extends ShadowRoot {
    mode: ShadowRootMode;
    delegatesFocus: boolean;
}
export declare class SyntheticShadowRoot extends DocumentFragment implements ShadowRoot {
    mode: ShadowRootMode;
    delegatesFocus: boolean;
    constructor();
    readonly nodeType: number;
    readonly nodeName: string;
    readonly nodeValue: null;
    readonly namespaceURI: null;
    readonly nextSibling: null;
    readonly previousSibling: null;
    readonly nextElementSibling: null;
    readonly previousElementSibling: null;
    readonly localName: null;
    readonly prefix: void;
    readonly ownerDocument: Document | null;
    readonly baseURI: string;
    readonly isConnected: boolean;
    readonly host: HTMLElement;
    readonly activeElement: Element | null;
    readonly firstChild: ChildNode | null;
    readonly lastChild: ChildNode | null;
    readonly innerHTML: string;
    readonly textContent: string;
    readonly children: HTMLCollectionOf<Element>;
    readonly childElementCount: number;
    readonly firstElementChild: Element;
    readonly lastElementChild: Element | null;
    readonly childNodes: NodeListOf<Node & Element>;
    readonly parentNode: null;
    readonly parentElement: null;
    stylesheets: StyleSheetList;
    readonly styleSheets: StyleSheetList;
    hasChildNodes(this: SyntheticShadowRootInterface): boolean;
    /**
     * Returns the first element that is a descendant of node that
     * matches selectors.
     */
    querySelector(this: SyntheticShadowRootInterface, selectors: string): Element | null;
    /**
     * Returns all element descendants of node that
     * match selectors.
     */
    querySelectorAll(this: SyntheticShadowRootInterface, selectors: string): NodeListOf<Element>;
    addEventListener(this: SyntheticShadowRootInterface, type: string, listener: EventListener, options?: boolean | AddEventListenerOptions): void;
    removeEventListener(this: SyntheticShadowRootInterface, type: string, listener: EventListener, options?: boolean | AddEventListenerOptions): void;
    compareDocumentPosition(this: SyntheticShadowRootInterface, otherNode: Node | SyntheticShadowRootInterface): 0 | 20 | 37 | 35;
    contains(this: SyntheticShadowRootInterface, otherNode: Node): boolean;
    toString(): string;
    elementFromPoint(this: SyntheticShadowRootInterface, left: number, top: number): Element | null;
    elementsFromPoint(this: SyntheticShadowRootInterface, left: number, top: number): Element[];
    getSelection(this: SyntheticShadowRootInterface): Selection | null;
    getRootNode(this: SyntheticShadowRootInterface, options?: GetRootNodeOptions): Node;
}

import { SyntheticShadowRootInterface } from "./shadow-root";
import { HTMLElementConstructor, HTMLIFrameElementConstructor } from "../framework/base-bridge-element";
export interface GetRootNodeOptions {
    composed?: boolean;
}
export declare function getNodeOwner(node: Node): HTMLElement | null;
export declare function isSlotElement(elm: Element): boolean;
export declare function isNodeOwnedBy(owner: HTMLElement, node: Node): boolean;
export declare function isNodeSlotted(host: Element, node: Node): boolean;
export declare function shadowRootChildNodes(root: SyntheticShadowRootInterface): Array<Element & Node>;
export declare function getAllMatches(owner: HTMLElement, nodeList: NodeList | Node[]): Array<Element & Node>;
/**
 * Dummy implementation of the Node.prototype.getRootNode.
 * Spec: https://dom.spec.whatwg.org/#dom-node-getrootnode
 *
 * TODO: Once we start using the real shadowDOM, this method should be replaced by:
 * const { getRootNode } = Node.prototype;
 */
export declare function getRootNodeGetter(this: Node, options?: GetRootNodeOptions): Node;
export declare function shadowRootQuerySelector(root: SyntheticShadowRootInterface, selector: string): Element | null;
export declare function shadowRootQuerySelectorAll(root: SyntheticShadowRootInterface, selector: string): Element[];
export declare function getFilteredChildNodes(node: Node): Element[];
export declare function PatchedElement(elm: HTMLElement): HTMLElementConstructor;
export declare function PatchedIframeElement(elm: HTMLIFrameElement): HTMLIFrameElementConstructor;

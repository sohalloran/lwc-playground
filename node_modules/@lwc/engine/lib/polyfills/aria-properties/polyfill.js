"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const element_1 = require("../../env/element");
// this regular expression is used to transform aria props into aria attributes because
// that doesn't follow the regular transformation process. e.g.: `aria-labeledby` <=> `ariaLabelBy`
const ARIA_REGEX = /^aria/;
const nodeToAriaPropertyValuesMap = new WeakMap();
const { hasOwnProperty } = Object.prototype;
const { replace: StringReplace, toLowerCase: StringToLowerCase, } = String.prototype;
function getAriaPropertyMap(elm) {
    let map = nodeToAriaPropertyValuesMap.get(elm);
    if (map === undefined) {
        map = { host: {}, sr: {} };
        nodeToAriaPropertyValuesMap.set(elm, map);
    }
    return map;
}
function getNormalizedAriaPropertyValue(propName, value) {
    return value == null ? null : value + '';
}
function createAriaPropertyPropertyDescriptor(propName, attrName) {
    return {
        get() {
            const map = getAriaPropertyMap(this);
            if (hasOwnProperty.call(map, propName)) {
                return map[propName];
            }
            // otherwise just reflect what's in the attribute
            return element_1.hasAttribute.call(this, attrName) ? element_1.getAttribute.call(this, attrName) : null;
        },
        set(newValue) {
            newValue = getNormalizedAriaPropertyValue(propName, newValue);
            const map = getAriaPropertyMap(this);
            map[propName] = newValue;
            // reflect into the corresponding attribute
            if (newValue === null) {
                element_1.removeAttribute.call(this, attrName);
            }
            else {
                element_1.setAttribute.call(this, attrName, newValue);
            }
        },
        configurable: true,
        enumerable: true,
    };
}
function patch(propName) {
    const attrName = StringToLowerCase.call(StringReplace.call(propName, ARIA_REGEX, 'aria-'));
    const descriptor = createAriaPropertyPropertyDescriptor(propName, attrName);
    Object.defineProperty(Element.prototype, propName, descriptor);
}
exports.patch = patch;
//# sourceMappingURL=polyfill.js.map
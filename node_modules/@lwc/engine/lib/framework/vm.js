"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("../shared/assert"));
const def_1 = require("./def");
const component_1 = require("./component");
const patch_1 = require("./patch");
const language_1 = require("../shared/language");
const fields_1 = require("../shared/fields");
const utils_1 = require("./utils");
const services_1 = require("./services");
const invoker_1 = require("./invoker");
const dom_1 = require("../env/dom");
const performance_timing_1 = require("./performance-timing");
const element_1 = require("../env/element");
const node_1 = require("../env/node");
// Object of type ShadowRoot for instance checks
const NativeShadowRoot = window.ShadowRoot;
const isNativeShadowRootAvailable = typeof NativeShadowRoot !== "undefined";
let idx = 0;
let uid = 0;
function callHook(cmp, fn, args) {
    return fn.apply(cmp, args);
}
function setHook(cmp, prop, newValue) {
    cmp[prop] = newValue;
}
function getHook(cmp, prop) {
    return cmp[prop];
}
// DO NOT CHANGE this:
// these two values are used by the faux-shadow implementation to traverse the DOM
const OwnerKey = '$$OwnerKey$$';
const OwnKey = '$$OwnKey$$';
function addInsertionIndex(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
        assert_1.default.invariant(vm.idx === 0, `${vm} is already locked to a previously generated idx.`);
    }
    vm.idx = ++idx;
    const { connected } = services_1.Services;
    if (connected) {
        services_1.invokeServiceHook(vm, connected);
    }
    const { connectedCallback } = vm.def;
    if (!language_1.isUndefined(connectedCallback)) {
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.startMeasure(vm, 'connectedCallback');
        }
        invoker_1.invokeComponentCallback(vm, connectedCallback);
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.endMeasure(vm, 'connectedCallback');
        }
    }
}
function removeInsertionIndex(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
        assert_1.default.invariant(vm.idx > 0, `${vm} is not locked to a previously generated idx.`);
    }
    vm.idx = 0;
    const { disconnected } = services_1.Services;
    if (disconnected) {
        services_1.invokeServiceHook(vm, disconnected);
    }
    const { disconnectedCallback } = vm.def;
    if (!language_1.isUndefined(disconnectedCallback)) {
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.startMeasure(vm, 'disconnectedCallback');
        }
        invoker_1.invokeComponentCallback(vm, disconnectedCallback);
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.endMeasure(vm, 'disconnectedCallback');
        }
    }
}
function renderVM(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    if (vm.isDirty) {
        rehydrate(vm);
    }
}
exports.renderVM = renderVM;
function appendVM(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    if (vm.idx !== 0) {
        return; // already appended
    }
    addInsertionIndex(vm);
}
exports.appendVM = appendVM;
function removeVM(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    if (vm.idx === 0) {
        return; // already removed
    }
    removeInsertionIndex(vm);
    // just in case it comes back, with this we guarantee re-rendering it
    vm.isDirty = true;
    component_1.clearReactiveListeners(vm);
    // At this point we need to force the removal of all children because
    // we don't have a way to know that children custom element were removed
    // from the DOM. Once we move to use Custom Element APIs, we can remove this
    // because the disconnectedCallback will be triggered automatically when
    // removed from the DOM.
    resetShadowRoot(vm);
}
exports.removeVM = removeVM;
function createVM(tagName, elm, Ctor, options) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.invariant(elm instanceof HTMLElement, `VM creation requires a DOM element instead of ${elm}.`);
    }
    const def = def_1.getComponentDef(Ctor);
    const { isRoot, mode, fallback } = options;
    const shadowRootOptions = {
        mode,
        delegatesFocus: !!Ctor.delegatesFocus,
    };
    uid += 1;
    const vm = {
        uid,
        idx: 0,
        isScheduled: false,
        isDirty: true,
        isRoot: language_1.isTrue(isRoot),
        fallback,
        mode,
        def,
        elm: elm,
        data: utils_1.EmptyObject,
        context: language_1.create(null),
        cmpProps: language_1.create(null),
        cmpTrack: language_1.create(null),
        cmpState: undefined,
        cmpSlots: fallback ? language_1.create(null) : undefined,
        cmpTemplate: undefined,
        cmpRoot: elm.attachShadow(shadowRootOptions),
        callHook,
        setHook,
        getHook,
        component: undefined,
        children: utils_1.EmptyArray,
        // used to track down all object-key pairs that makes this vm reactive
        deps: [],
    };
    if (process.env.NODE_ENV !== 'production') {
        vm.toString = () => {
            return `[object:vm ${def.name} (${vm.idx})]`;
        };
    }
    // create component instance associated to the vm and the element
    component_1.createComponent(vm, Ctor);
    // link component to the wire service
    component_1.linkComponent(vm);
}
exports.createVM = createVM;
function rehydrate(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
        assert_1.default.isTrue(vm.elm instanceof HTMLElement, `rehydration can only happen after ${vm} was patched the first time.`);
    }
    if (vm.idx > 0 && vm.isDirty) {
        const children = component_1.renderComponent(vm);
        vm.isScheduled = false;
        patchShadowRoot(vm, children);
        processPostPatchCallbacks(vm);
    }
}
function patchErrorBoundaryVm(errorBoundaryVm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(errorBoundaryVm && "component" in errorBoundaryVm, `${errorBoundaryVm} is not a vm.`);
        assert_1.default.isTrue(errorBoundaryVm.elm instanceof HTMLElement, `rehydration can only happen after ${errorBoundaryVm} was patched the first time.`);
        assert_1.default.isTrue(errorBoundaryVm.isDirty, "rehydration recovery should only happen if vm has updated");
    }
    const children = component_1.renderComponent(errorBoundaryVm);
    const { elm, cmpRoot, fallback, children: oldCh } = errorBoundaryVm;
    errorBoundaryVm.isScheduled = false;
    errorBoundaryVm.children = children; // caching the new children collection
    // patch function mutates vnodes by adding the element reference,
    // however, if patching fails it contains partial changes.
    // patch failures are caught in flushRehydrationQueue
    patch_1.patchChildren(elm, cmpRoot, oldCh, children, fallback);
    processPostPatchCallbacks(errorBoundaryVm);
}
function patchShadowRoot(vm, children) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    const { elm, cmpRoot, fallback, children: oldCh } = vm;
    vm.children = children; // caching the new children collection
    if (children.length === 0 && oldCh.length === 0) {
        return; // nothing to do here
    }
    let error;
    if (process.env.NODE_ENV !== 'production') {
        performance_timing_1.startMeasure(vm, 'patch');
    }
    try {
        // patch function mutates vnodes by adding the element reference,
        // however, if patching fails it contains partial changes.
        patch_1.patchChildren(elm, cmpRoot, oldCh, children, fallback);
    }
    catch (e) {
        error = Object(e);
    }
    finally {
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.endMeasure(vm, 'patch');
        }
        if (!language_1.isUndefined(error)) {
            const errorBoundaryVm = getErrorBoundaryVMFromOwnElement(vm);
            if (language_1.isUndefined(errorBoundaryVm)) {
                throw error; // tslint:disable-line
            }
            recoverFromLifeCycleError(vm, errorBoundaryVm, error);
            // synchronously render error boundary's alternative view
            // to recover in the same tick
            if (errorBoundaryVm.isDirty) {
                patchErrorBoundaryVm(errorBoundaryVm);
            }
        }
    }
}
function processPostPatchCallbacks(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    const { rendered } = services_1.Services;
    if (rendered) {
        services_1.invokeServiceHook(vm, rendered);
    }
    const { renderedCallback } = vm.def;
    if (!language_1.isUndefined(renderedCallback)) {
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.startMeasure(vm, 'renderedCallback');
        }
        invoker_1.invokeComponentCallback(vm, renderedCallback);
        if (process.env.NODE_ENV !== 'production') {
            performance_timing_1.endMeasure(vm, 'renderedCallback');
        }
    }
}
let rehydrateQueue = [];
function flushRehydrationQueue() {
    performance_timing_1.startGlobalMeasure(performance_timing_1.GlobalMeasurementPhase.REHYDRATE);
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.invariant(rehydrateQueue.length, `If rehydrateQueue was scheduled, it is because there must be at least one VM on this pending queue instead of ${rehydrateQueue}.`);
    }
    const vms = rehydrateQueue.sort((a, b) => a.idx - b.idx);
    rehydrateQueue = []; // reset to a new queue
    for (let i = 0, len = vms.length; i < len; i += 1) {
        const vm = vms[i];
        try {
            rehydrate(vm);
        }
        catch (error) {
            const errorBoundaryVm = getErrorBoundaryVMFromParentElement(vm);
            if (language_1.isUndefined(errorBoundaryVm)) {
                if (i + 1 < len) {
                    // pieces of the queue are still pending to be rehydrated, those should have priority
                    if (rehydrateQueue.length === 0) {
                        utils_1.addCallbackToNextTick(flushRehydrationQueue);
                    }
                    language_1.ArrayUnshift.apply(rehydrateQueue, language_1.ArraySlice.call(vms, i + 1));
                }
                // we need to end the measure before throwing.
                performance_timing_1.endGlobalMeasure(performance_timing_1.GlobalMeasurementPhase.REHYDRATE);
                // rethrowing the original error will break the current tick, but since the next tick is
                // already scheduled, it should continue patching the rest.
                throw error; // tslint:disable-line
            }
            // we only recover if error boundary is present in the hierarchy
            recoverFromLifeCycleError(vm, errorBoundaryVm, error);
            if (errorBoundaryVm.isDirty) {
                patchErrorBoundaryVm(errorBoundaryVm);
            }
        }
    }
    performance_timing_1.endGlobalMeasure(performance_timing_1.GlobalMeasurementPhase.REHYDRATE);
}
function recoverFromLifeCycleError(failedVm, errorBoundaryVm, error) {
    if (language_1.isUndefined(error.wcStack)) {
        error.wcStack = getErrorComponentStack(failedVm.elm);
    }
    resetShadowRoot(failedVm); // remove offenders
    const { errorCallback } = errorBoundaryVm.def;
    if (process.env.NODE_ENV !== 'production') {
        performance_timing_1.startMeasure(errorBoundaryVm, 'errorCallback');
    }
    // error boundaries must have an ErrorCallback
    invoker_1.invokeComponentCallback(errorBoundaryVm, errorCallback, [error, error.wcStack]);
    if (process.env.NODE_ENV !== 'production') {
        performance_timing_1.endMeasure(errorBoundaryVm, 'errorCallback');
    }
}
function destroyChildren(children) {
    for (let i = 0, len = children.length; i < len; i += 1) {
        const vnode = children[i];
        if (language_1.isNull(vnode)) {
            continue;
        }
        const { elm } = vnode;
        if (language_1.isUndefined(elm)) {
            continue;
        }
        try {
            // if destroy fails, it really means that the service hook or disconnect hook failed,
            // we should just log the issue and continue our destroying procedure
            vnode.hook.destroy(vnode);
        }
        catch (e) {
            if (process.env.NODE_ENV !== 'production') {
                const vm = getCustomElementVM(elm);
                assert_1.default.logError(`Internal Error: Failed to disconnect component ${vm}. ${e}`, elm);
            }
        }
    }
}
// This is a super optimized mechanism to remove the content of the shadowRoot
// without having to go into snabbdom. Especially useful when the reset is a consequence
// of an error, in which case the children VNodes might not be representing the current
// state of the DOM
function resetShadowRoot(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    const { children: oldCh, fallback } = vm;
    vm.children = utils_1.EmptyArray;
    if (language_1.isTrue(fallback)) {
        // faux-shadow does not have a real cmpRoot instance, instead
        // we need to remove the content of the host entirely
        element_1.innerHTMLSetter.call(vm.elm, '');
    }
    else {
        dom_1.ShadowRootInnerHTMLSetter.call(vm.cmpRoot, '');
    }
    // proper destroying mechanism for those vnodes that requires it
    destroyChildren(oldCh);
}
exports.resetShadowRoot = resetShadowRoot;
function scheduleRehydration(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    if (!vm.isScheduled) {
        vm.isScheduled = true;
        if (rehydrateQueue.length === 0) {
            utils_1.addCallbackToNextTick(flushRehydrationQueue);
        }
        language_1.ArrayPush.call(rehydrateQueue, vm);
    }
}
exports.scheduleRehydration = scheduleRehydration;
function getErrorBoundaryVMFromParentElement(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    const { elm } = vm;
    const parentElm = elm && getParentOrHostElement(elm);
    return getErrorBoundaryVM(parentElm);
}
function getErrorBoundaryVMFromOwnElement(vm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    const { elm } = vm;
    return getErrorBoundaryVM(elm);
}
function getErrorBoundaryVM(startingElement) {
    let elm = startingElement;
    let vm;
    while (!language_1.isNull(elm)) {
        vm = fields_1.getInternalField(elm, utils_1.ViewModelReflection);
        if (!language_1.isUndefined(vm) && !language_1.isUndefined(vm.def.errorCallback)) {
            return vm;
        }
        elm = getParentOrHostElement(elm);
    }
}
/**
 * Returns the component stack. Used for errors messages only.
 *
 * @param {Element} startingElement
 *
 * @return {string} The component stack for errors.
 */
function getErrorComponentStack(startingElement) {
    const wcStack = [];
    let elm = startingElement;
    do {
        const currentVm = fields_1.getInternalField(elm, utils_1.ViewModelReflection);
        if (!language_1.isUndefined(currentVm)) {
            const tagName = element_1.tagNameGetter.call(elm);
            const is = elm.getAttribute('is');
            language_1.ArrayPush.call(wcStack, `<${language_1.StringToLowerCase.call(tagName)}${is ? ' is="${is}' : ''}>`);
        }
        elm = getParentOrHostElement(elm);
    } while (!language_1.isNull(elm));
    return wcStack.reverse().join('\n\t');
}
exports.getErrorComponentStack = getErrorComponentStack;
/**
 * Finds the parent of the specified element. If shadow DOM is enabled, finds
 * the host of the shadow root to escape the shadow boundary.
 * @param {HTMLElement} elm
 * @return {HTMLElement | null} the parent element, escaping any shadow root boundaries, if it exists
 */
function getParentOrHostElement(elm) {
    const parentElement = node_1.parentElementGetter.call(elm);
    // If this is a shadow root, find the host instead
    return (language_1.isNull(parentElement) && isNativeShadowRootAvailable) ? getHostElement(elm) : parentElement;
}
/**
 * Finds the host element, if it exists.
 * @param {HTMLElement} elm
 * @return {HTMLElement | null} the host element if it exists
 */
function getHostElement(elm) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(isNativeShadowRootAvailable, 'getHostElement should only be called if native shadow root is available');
        assert_1.default.isTrue(language_1.isNull(node_1.parentElementGetter.call(elm)), `getHostElement should only be called if the parent element of ${elm} is null`);
    }
    const parentNode = node_1.parentNodeGetter.call(elm);
    return parentNode instanceof NativeShadowRoot
        ? dom_1.ShadowRootHostGetter.call(parentNode)
        : null;
}
function isNodeFromTemplate(node) {
    if (language_1.isFalse(node instanceof Node)) {
        return false;
    }
    return !language_1.isUndefined(getNodeOwnerKey(node));
}
exports.isNodeFromTemplate = isNodeFromTemplate;
function getNodeOwnerKey(node) {
    return node[OwnerKey];
}
exports.getNodeOwnerKey = getNodeOwnerKey;
function setNodeOwnerKey(node, value) {
    if (process.env.NODE_ENV !== 'production') {
        // in dev-mode, we are more restrictive about what you can do with the owner key
        language_1.defineProperty(node, OwnerKey, {
            value,
            enumerable: true,
        });
    }
    else {
        // in prod, for better perf, we just let it roll
        node[OwnerKey] = value;
    }
}
exports.setNodeOwnerKey = setNodeOwnerKey;
function getNodeKey(node) {
    return node[OwnKey];
}
exports.getNodeKey = getNodeKey;
function setNodeKey(node, value) {
    if (process.env.NODE_ENV !== 'production') {
        // in dev-mode, we are more restrictive about what you can do with the own key
        language_1.defineProperty(node, OwnKey, {
            value,
            enumerable: true,
        });
    }
    else {
        // in prod, for better perf, we just let it roll
        node[OwnKey] = value;
    }
}
exports.setNodeKey = setNodeKey;
function getShadowRootHost(sr) {
    const vm = fields_1.getInternalField(sr, utils_1.ViewModelReflection);
    if (language_1.isUndefined(vm)) {
        return null;
    }
    return vm.elm;
}
exports.getShadowRootHost = getShadowRootHost;
function getCustomElementVM(elm) {
    if (process.env.NODE_ENV !== 'production') {
        const vm = fields_1.getInternalField(elm, utils_1.ViewModelReflection);
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    return fields_1.getInternalField(elm, utils_1.ViewModelReflection);
}
exports.getCustomElementVM = getCustomElementVM;
function getComponentVM(component) {
    if (process.env.NODE_ENV !== 'production') {
        const vm = fields_1.getHiddenField(component, utils_1.ViewModelReflection);
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    return fields_1.getHiddenField(component, utils_1.ViewModelReflection);
}
exports.getComponentVM = getComponentVM;
function getShadowRootVM(root) {
    // TODO: this eventually should not rely on the symbol, and should use a Weak Ref
    if (process.env.NODE_ENV !== 'production') {
        const vm = fields_1.getInternalField(root, utils_1.ViewModelReflection);
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
    }
    return fields_1.getInternalField(root, utils_1.ViewModelReflection);
}
exports.getShadowRootVM = getShadowRootVM;
// slow path routine
// NOTE: we should probably more this routine to the faux shadow folder
// and get the allocation to be cached by in the elm instead of in the VM
function allocateInSlot(vm, children) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.isTrue(vm && "cmpRoot" in vm, `${vm} is not a vm.`);
        assert_1.default.invariant(language_1.isObject(vm.cmpSlots), `When doing manual allocation, there must be a cmpSlots object available.`);
    }
    const { cmpSlots: oldSlots } = vm;
    const cmpSlots = vm.cmpSlots = language_1.create(null);
    for (let i = 0, len = children.length; i < len; i += 1) {
        const vnode = children[i];
        if (language_1.isNull(vnode)) {
            continue;
        }
        const data = vnode.data;
        const slotName = ((data.attrs && data.attrs.slot) || '');
        const vnodes = cmpSlots[slotName] = cmpSlots[slotName] || [];
        // re-keying the vnodes is necessary to avoid conflicts with default content for the slot
        // which might have similar keys. Each vnode will always have a key that
        // starts with a numeric character from compiler. In this case, we add a unique
        // notation for slotted vnodes keys, e.g.: `@foo:1:1`
        vnode.key = `@${slotName}:${vnode.key}`;
        language_1.ArrayPush.call(vnodes, vnode);
    }
    if (!vm.isDirty) {
        // We need to determine if the old allocation is really different from the new one
        // and mark the vm as dirty
        const oldKeys = language_1.keys(oldSlots);
        if (oldKeys.length !== language_1.keys(cmpSlots).length) {
            component_1.markComponentAsDirty(vm);
            return;
        }
        for (let i = 0, len = oldKeys.length; i < len; i += 1) {
            const key = oldKeys[i];
            if (language_1.isUndefined(cmpSlots[key]) || oldSlots[key].length !== cmpSlots[key].length) {
                component_1.markComponentAsDirty(vm);
                return;
            }
            const oldVNodes = oldSlots[key];
            const vnodes = cmpSlots[key];
            for (let j = 0, a = cmpSlots[key].length; j < a; j += 1) {
                if (oldVNodes[j] !== vnodes[j]) {
                    component_1.markComponentAsDirty(vm);
                    return;
                }
            }
        }
    }
}
exports.allocateInSlot = allocateInSlot;
//# sourceMappingURL=vm.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("../shared/assert"));
const language_1 = require("../shared/language");
const observable_membrane_1 = __importDefault(require("observable-membrane"));
const watcher_1 = require("./watcher");
function valueDistortion(value) {
    return value;
}
exports.reactiveMembrane = new observable_membrane_1.default({
    valueObserved: watcher_1.observeMutation,
    valueMutated: watcher_1.notifyMutation,
    valueDistortion,
});
// TODO: REMOVE THIS https://github.com/salesforce/lwc/issues/129
function dangerousObjectMutation(obj) {
    if (process.env.NODE_ENV !== 'production') {
        assert_1.default.logWarning(`Dangerously Mutating Object ${language_1.toString(obj)}. This object was passed to you from a parent component, and should not be mutated here. This will be removed in the near future.`);
    }
    return exports.reactiveMembrane.getProxy(exports.unwrap(obj));
}
exports.dangerousObjectMutation = dangerousObjectMutation;
// Universal unwrap mechanism that works for observable membrane
// and wrapped iframe contentWindow
exports.unwrap = function (value) {
    const unwrapped = exports.reactiveMembrane.unwrapProxy(value);
    if (unwrapped !== value) {
        return unwrapped;
    }
    return value;
};
//# sourceMappingURL=membrane.js.map
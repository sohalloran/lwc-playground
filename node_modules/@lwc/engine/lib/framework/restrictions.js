"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("../shared/assert"));
const language_1 = require("../shared/language");
const attributes_1 = require("./attributes");
const invoker_1 = require("./invoker");
const vm_1 = require("./vm");
const element_1 = require("../env/element");
const language_2 = require("./../shared/language");
function getNodeRestrictionsDescriptors(node, options) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    // getPropertyDescriptor here recursively looks up the prototype chain
    // and returns the first descriptor for the property
    const originalTextContentDescriptor = language_1.getPropertyDescriptor(node, 'textContent');
    const originalNodeValueDescriptor = language_1.getPropertyDescriptor(node, 'nodeValue');
    const { appendChild, insertBefore, removeChild, replaceChild, } = node;
    return {
        appendChild: {
            value(aChild) {
                if (this instanceof Element && options.isPortal !== true) {
                    assert_1.default.logError(`appendChild is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                }
                return appendChild.call(this, aChild);
            },
            enumerable: false,
            writable: false,
            configurable: true,
        },
        insertBefore: {
            value(newNode, referenceNode) {
                if (this instanceof Element && options.isPortal !== true) {
                    assert_1.default.logError(`insertBefore is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                }
                return insertBefore.call(this, newNode, referenceNode);
            },
            enumerable: false,
            writable: false,
            configurable: true,
        },
        removeChild: {
            value(aChild) {
                if (this instanceof Element && options.isPortal !== true) {
                    assert_1.default.logError(`removeChild is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                }
                return removeChild.call(this, aChild);
            },
            enumerable: false,
            writable: false,
            configurable: true,
        },
        replaceChild: {
            value(newChild, oldChild) {
                if (this instanceof Element && options.isPortal !== true) {
                    assert_1.default.logError(`replaceChild is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                }
                return replaceChild.call(this, newChild, oldChild);
            },
            enumerable: false,
            writable: false,
            configurable: true,
        },
        nodeValue: {
            get() {
                return originalNodeValueDescriptor.get.call(this);
            },
            set(value) {
                if (process.env.NODE_ENV !== 'production') {
                    if (this instanceof Element && options.isPortal !== true) {
                        assert_1.default.logError(`nodeValue is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                    }
                }
                originalNodeValueDescriptor.set.call(this, value);
            }
        },
        textContent: {
            get() {
                return originalTextContentDescriptor.get.call(this);
            },
            set(value) {
                if (process.env.NODE_ENV !== 'production') {
                    if (this instanceof Element && options.isPortal !== true) {
                        assert_1.default.logError(`textContent is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                    }
                }
                originalTextContentDescriptor.set.call(this, value);
            }
        },
    };
}
function getElementRestrictionsDescriptors(elm, options) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    const descriptors = getNodeRestrictionsDescriptors(elm, options);
    const originalInnerHTMLDescriptor = language_1.getPropertyDescriptor(elm, 'innerHTML');
    language_1.assign(descriptors, {
        innerHTML: {
            get() {
                return originalInnerHTMLDescriptor.get.call(this);
            },
            set(value) {
                if (process.env.NODE_ENV !== 'production') {
                    if (options.isPortal !== true) {
                        assert_1.default.logError(`innerHTML is disallowed in Element unless \`lwc:dom="manual"\` directive is used in the template.`, this);
                    }
                }
                return originalInnerHTMLDescriptor.set.call(this, value);
            },
            enumerable: true,
            configurable: true,
        }
    });
    return descriptors;
}
function getShadowRootRestrictionsDescriptors(sr, options) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    // blacklisting properties in dev mode only to avoid people doing the wrong
    // thing when using the real shadow root, because if that's the case,
    // the component will not work when running in fallback mode.
    const originalQuerySelector = sr.querySelector;
    const originalQuerySelectorAll = sr.querySelectorAll;
    const originalAddEventListener = sr.addEventListener;
    const descriptors = getNodeRestrictionsDescriptors(sr, options);
    language_1.assign(descriptors, {
        addEventListener: {
            value(type) {
                assert_1.default.invariant(!invoker_1.isRendering, `${invoker_1.vmBeingRendered}.render() method has side effects on the state of ${language_1.toString(sr)} by adding an event listener for "${type}".`);
                return originalAddEventListener.apply(this, arguments);
            }
        },
        querySelector: {
            value() {
                const vm = vm_1.getShadowRootVM(this);
                assert_1.default.isFalse(invoker_1.isBeingConstructed(vm), `this.template.querySelector() cannot be called during the construction of the custom element for ${vm} because no content has been rendered yet.`);
                return originalQuerySelector.apply(this, arguments);
            }
        },
        querySelectorAll: {
            value() {
                const vm = vm_1.getShadowRootVM(this);
                assert_1.default.isFalse(invoker_1.isBeingConstructed(vm), `this.template.querySelectorAll() cannot be called during the construction of the custom element for ${vm} because no content has been rendered yet.`);
                return originalQuerySelectorAll.apply(this, arguments);
            }
        },
    });
    const BlackListedShadowRootMethods = {
        appendChild: 0,
        removeChild: 0,
        replaceChild: 0,
        cloneNode: 0,
        insertBefore: 0,
        getElementById: 0,
        getSelection: 0,
        elementsFromPoint: 0,
    };
    language_1.forEach.call(language_1.getOwnPropertyNames(BlackListedShadowRootMethods), (methodName) => {
        const descriptor = {
            get() {
                throw new Error(`Disallowed method "${methodName}" in ShadowRoot.`);
            }
        };
        descriptors[methodName] = descriptor;
    });
    return descriptors;
}
// Custom Elements Restrictions:
// -----------------------------
function getAttributePatched(attrName) {
    if (process.env.NODE_ENV !== 'production') {
        const vm = vm_1.getCustomElementVM(this);
        assertAttributeReflectionCapability(vm, attrName);
    }
    return element_1.getAttribute.apply(this, language_1.ArraySlice.call(arguments));
}
function setAttributePatched(attrName, newValue) {
    const vm = vm_1.getCustomElementVM(this);
    if (process.env.NODE_ENV !== 'production') {
        assertAttributeMutationCapability(vm, attrName);
        assertAttributeReflectionCapability(vm, attrName);
    }
    element_1.setAttribute.apply(this, language_1.ArraySlice.call(arguments));
}
function setAttributeNSPatched(attrNameSpace, attrName, newValue) {
    const vm = vm_1.getCustomElementVM(this);
    if (process.env.NODE_ENV !== 'production') {
        assertAttributeMutationCapability(vm, attrName);
        assertAttributeReflectionCapability(vm, attrName);
    }
    element_1.setAttributeNS.apply(this, language_1.ArraySlice.call(arguments));
}
function removeAttributePatched(attrName) {
    const vm = vm_1.getCustomElementVM(this);
    // marking the set is needed for the AOM polyfill
    if (process.env.NODE_ENV !== 'production') {
        assertAttributeMutationCapability(vm, attrName);
        assertAttributeReflectionCapability(vm, attrName);
    }
    element_1.removeAttribute.apply(this, language_1.ArraySlice.call(arguments));
}
function removeAttributeNSPatched(attrNameSpace, attrName) {
    const vm = vm_1.getCustomElementVM(this);
    if (process.env.NODE_ENV !== 'production') {
        assertAttributeMutationCapability(vm, attrName);
        assertAttributeReflectionCapability(vm, attrName);
    }
    element_1.removeAttributeNS.apply(this, language_1.ArraySlice.call(arguments));
}
function assertAttributeReflectionCapability(vm, attrName) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    const propName = language_1.isString(attrName) ? attributes_1.getPropNameFromAttrName(language_1.StringToLowerCase.call(attrName)) : null;
    const { elm, def: { props: propsConfig } } = vm;
    if (!language_1.isUndefined(vm_1.getNodeOwnerKey(elm)) && attributes_1.isAttributeLocked(elm, attrName) && propsConfig && propName && propsConfig[propName]) {
        assert_1.default.logError(`Invalid attribute "${language_1.StringToLowerCase.call(attrName)}" for ${vm}. Instead access the public property with \`element.${propName};\`.`, elm);
    }
}
function assertAttributeMutationCapability(vm, attrName) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    const { elm } = vm;
    if (!language_1.isUndefined(vm_1.getNodeOwnerKey(elm)) && attributes_1.isAttributeLocked(elm, attrName)) {
        assert_1.default.logError(`Invalid operation on Element ${vm}. Elements created via a template should not be mutated using DOM APIs. Instead of attempting to update this element directly to change the value of attribute "${attrName}", you can update the state of the component, and let the engine to rehydrate the element accordingly.`, elm);
    }
}
function getCustomElementRestrictionsDescriptors(elm, options) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    const descriptors = getNodeRestrictionsDescriptors(elm, options);
    const originalAddEventListener = elm.addEventListener;
    return language_1.assign(descriptors, {
        addEventListener: {
            value(type) {
                assert_1.default.invariant(!invoker_1.isRendering, `${invoker_1.vmBeingRendered}.render() method has side effects on the state of ${language_1.toString(elm)} by adding an event listener for "${type}".`);
                return originalAddEventListener.apply(this, arguments);
            }
        },
        // replacing mutators and accessors on the element itself to catch any mutation
        getAttribute: {
            value: getAttributePatched,
            configurable: true,
        },
        setAttribute: {
            value: setAttributePatched,
            configurable: true,
        },
        setAttributeNS: {
            value: setAttributeNSPatched,
            configurable: true,
        },
        removeAttribute: {
            value: removeAttributePatched,
            configurable: true,
        },
        removeAttributeNS: {
            value: removeAttributeNSPatched,
            configurable: true,
        },
    });
}
function getComponentRestrictionsDescriptors(cmp, options) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    const originalSetAttribute = cmp.setAttribute;
    return {
        setAttribute: {
            value(attrName, value) {
                // logging errors for experimental and special attributes
                if (language_1.isString(attrName)) {
                    const propName = attributes_1.getPropNameFromAttrName(attrName);
                    const info = attributes_1.getGlobalHTMLPropertiesInfo();
                    if (info[propName] && info[propName].attribute) {
                        const { error, experimental } = info[propName];
                        if (error) {
                            assert_1.default.logError(error, vm_1.getComponentVM(this).elm);
                        }
                        else if (experimental) {
                            assert_1.default.logError(`Attribute \`${attrName}\` is an experimental attribute that is not standardized or supported by all browsers. Property "${propName}" and attribute "${attrName}" are ignored.`, vm_1.getComponentVM(this).elm);
                        }
                    }
                }
                originalSetAttribute.apply(this, arguments);
            },
            enumerable: true,
            configurable: true,
            writable: true,
        },
        tagName: {
            get() {
                throw new Error(`Usage of property \`tagName\` is disallowed because the component itself does not know which tagName will be used to create the element, therefore writing code that check for that value is error prone.`);
            },
            enumerable: true,
            configurable: true,
        },
    };
}
function getLightingElementProtypeRestrictionsDescriptors(proto, options) {
    if (process.env.NODE_ENV === 'production') {
        // this method should never leak to prod
        throw new ReferenceError();
    }
    const info = attributes_1.getGlobalHTMLPropertiesInfo();
    const descriptors = {};
    language_1.forEach.call(language_1.getOwnPropertyNames(info), (propName) => {
        if (propName in proto) {
            return; // no need to redefine something that we are already exposing
        }
        descriptors[propName] = {
            get() {
                const { error, attribute, readOnly, experimental } = info[propName];
                const msg = [];
                msg.push(`Accessing the global HTML property "${propName}" in ${this} is disabled.`);
                if (error) {
                    msg.push(error);
                }
                else {
                    if (experimental) {
                        msg.push(`This is an experimental property that is not standardized or supported by all browsers. Property "${propName}" and attribute "${attribute}" are ignored.`);
                    }
                    if (readOnly) {
                        // TODO - need to improve this message
                        msg.push(`Property is read-only.`);
                    }
                    if (attribute) {
                        msg.push(`"Instead access it via the reflective attribute "${attribute}" with one of these techniques:`);
                        msg.push(`  * Use \`this.getAttribute("${attribute}")\` to access the attribute value. This option is best suited for accessing the value in a getter during the rendering process.`);
                        msg.push(`  * Declare \`static observedAttributes = ["${attribute}"]\` and use \`attributeChangedCallback(attrName, oldValue, newValue)\` to get a notification each time the attribute changes. This option is best suited for reactive programming, eg. fetching new data each time the attribute is updated.`);
                    }
                }
                assert_1.default.logWarning(msg.join('\n'), vm_1.getComponentVM(this).elm);
                return; // explicit undefined
            },
            // a setter is required here to avoid TypeError's when an attribute is set in a template but only the above getter is defined
            set() { },
        };
    });
    return descriptors;
}
function patchNodeWithRestrictions(node, options) {
    language_1.defineProperties(node, getNodeRestrictionsDescriptors(node, options));
}
exports.patchNodeWithRestrictions = patchNodeWithRestrictions;
function patchElementWithRestrictions(elm, options) {
    language_1.defineProperties(elm, getElementRestrictionsDescriptors(elm, options));
}
exports.patchElementWithRestrictions = patchElementWithRestrictions;
// This routine will prevent access to certain properties on a shadow root instance to guarantee
// that all components will work fine in IE11 and other browsers without shadow dom support.
function patchShadowRootWithRestrictions(sr, options) {
    language_1.defineProperties(sr, getShadowRootRestrictionsDescriptors(sr, options));
}
exports.patchShadowRootWithRestrictions = patchShadowRootWithRestrictions;
function patchCustomElementWithRestrictions(elm, options) {
    const restrictionsDescriptors = getCustomElementRestrictionsDescriptors(elm, options);
    const elmProto = language_1.getPrototypeOf(elm);
    language_1.setPrototypeOf(elm, language_2.create(elmProto, restrictionsDescriptors));
}
exports.patchCustomElementWithRestrictions = patchCustomElementWithRestrictions;
function patchComponentWithRestrictions(cmp, options) {
    language_1.defineProperties(cmp, getComponentRestrictionsDescriptors(cmp, options));
}
exports.patchComponentWithRestrictions = patchComponentWithRestrictions;
function patchLightningElementPrototypeWithRestrictions(proto, options) {
    language_1.defineProperties(proto, getLightingElementProtypeRestrictionsDescriptors(proto, options));
}
exports.patchLightningElementPrototypeWithRestrictions = patchLightningElementPrototypeWithRestrictions;
//# sourceMappingURL=restrictions.js.map
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const language_1 = require("./language");
const fields_1 = require("./fields");
const Items = fields_1.createFieldName('items');
function isValidHTMLCollectionName(name) {
    return name !== 'length' && isNaN(name);
}
function getNodeHTMLCollectionName(node) {
    return node.getAttribute('id') || node.getAttribute('name');
}
class StaticHTMLCollection extends HTMLCollection {
    item(index) {
        return this[index];
    }
    // spec: https://dom.spec.whatwg.org/#dom-htmlcollection-nameditem-key
    namedItem(name) {
        if (isValidHTMLCollectionName(name) && this[name]) {
            return this[name];
        }
        const items = fields_1.getInternalField(this, Items);
        // Note: loop in reverse so that the first named item matches the named property
        for (let len = items.length - 1; len >= 0; len -= 1) {
            const item = items[len];
            const nodeName = getNodeHTMLCollectionName(item);
            if (nodeName === name) {
                return item;
            }
        }
        return null;
    }
    get length() {
        return fields_1.getInternalField(this, Items).length;
    }
    // Iterator protocol
    forEach(cb, thisArg) {
        language_1.forEach.call(fields_1.getInternalField(this, Items), cb, thisArg);
    }
    entries() {
        return language_1.ArrayMap.call(fields_1.getInternalField(this, Items), (v, i) => [i, v]);
    }
    keys() {
        return language_1.ArrayMap.call(fields_1.getInternalField(this, Items), (v, i) => i);
    }
    values() {
        return fields_1.getInternalField(this, Items);
    }
    [Symbol.iterator]() {
        let nextIndex = 0;
        return {
            next: () => {
                const items = fields_1.getInternalField(this, Items);
                return nextIndex < items.length ?
                    {
                        value: items[nextIndex++], done: false
                    } : {
                    done: true
                };
            }
        };
    }
}
function createStaticHTMLCollection(items) {
    const collection = language_1.create(StaticHTMLCollection.prototype, {
        [Items]: {
            value: items,
        }
    });
    // setting static indexes
    language_1.forEach.call(items, (item, index) => {
        language_1.defineProperty(collection, index, {
            value: item,
            enumerable: true,
            configurable: true,
        });
    });
    return collection;
}
exports.createStaticHTMLCollection = createStaticHTMLCollection;
//# sourceMappingURL=static-html-collection.js.map
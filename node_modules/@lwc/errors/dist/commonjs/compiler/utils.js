"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const types_1 = require("../shared/types");
class CompilerError extends Error {
    constructor(code, message, filename, location) {
        super(message);
        this.level = types_1.DiagnosticLevel.Error;
        this.code = code;
        this.filename = filename;
        this.location = location;
    }
    static from(diagnostic, origin) {
        const { code, message } = diagnostic;
        const filename = getFilename(origin, diagnostic);
        const location = getLocation(origin, diagnostic);
        return new CompilerError(code, message, filename, location);
    }
    toDiagnostic() {
        return {
            code: this.code,
            message: this.message,
            level: this.level,
            filename: this.filename,
            location: this.location
        };
    }
}
exports.CompilerError = CompilerError;
function getCodeFromError(error) {
    if (error.lwcCode && typeof error.lwcCode === 'number') {
        return error.lwcCode;
    }
    else if (error.code && typeof error.code === 'number') {
        return error.code;
    }
    return undefined;
}
exports.getCodeFromError = getCodeFromError;
function getFilename(origin, obj) {
    // Give priority to explicit origin
    if (origin && origin.filename) {
        return origin.filename;
    }
    else if (obj) {
        return obj.filename || obj.fileName || obj.file;
    }
    return undefined;
}
exports.getFilename = getFilename;
function getLocation(origin, obj) {
    // Give priority to explicit origin
    if (origin && origin.location) {
        return origin.location;
    }
    return getLocationFromObject(obj);
}
exports.getLocation = getLocation;
function getLocationFromObject(obj) {
    if (obj) {
        if (obj.location) {
            return obj.location;
        }
        else if (obj.loc) {
            return obj.loc;
        }
        else if (Number.isInteger(obj.line) &&
            Number.isInteger(obj.column)) {
            return { line: obj.line, column: obj.column, start: obj.start, length: obj.length };
        }
    }
    return undefined;
}
//# sourceMappingURL=utils.js.map
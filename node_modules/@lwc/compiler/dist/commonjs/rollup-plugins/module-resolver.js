"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const errors_1 = require("@lwc/errors");
const EMPTY_IMPLICIT_CSS_CONTENT = '';
const EMPTY_IMPLICIT_HTML_CONTENT = 'export default void 0';
const IMPLICIT_DEFAULT_HTML_PATH = '@lwc/resources/empty_html.js';
const IMPLICIT_DEFAULT_CSS_PATH = '@lwc/resources/empty_css.css';
function isRelativeImport(id) {
    return id.startsWith(".");
}
function isImplicitCssImport(id, importee) {
    return (path.extname(id) === ".css" &&
        path.extname(importee) === ".html" &&
        path.basename(id, ".css") === path.basename(importee, ".html"));
}
function isImplicitHTMLImport(importee, importer) {
    return (importer &&
        path.extname(importer) === ".js" &&
        path.extname(importee) === '.html' &&
        path.dirname(importer) === path.dirname(importee) &&
        path.basename(importer, '.js') === path.basename(importee, '.html'));
}
function fileExists(fileName, { files }) {
    return files.hasOwnProperty(fileName);
}
function readFile(filename, options) {
    const { files } = options;
    if (fileExists(filename, options)) {
        return files[filename];
    }
    else {
        throw errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.NONEXISTENT_FILE, {
            messageArgs: [filename],
            origin: { filename }
        });
    }
}
function default_1({ options }) {
    return {
        name: "lwc-module-resolver",
        resolveId(importee, importer) {
            if (!isRelativeImport(importee) && importer) {
                return;
            }
            const relPath = importer ? path.dirname(importer) : options.baseDir || "";
            let absPath = path.join(relPath, importee);
            if (!path.extname(importee)) {
                absPath += ".js";
            }
            if (!fileExists(absPath, options)) {
                if (isImplicitCssImport(importee, importer)) {
                    return IMPLICIT_DEFAULT_CSS_PATH;
                }
                if (isImplicitHTMLImport(absPath, importer)) {
                    return IMPLICIT_DEFAULT_HTML_PATH;
                }
                if (importer) {
                    throw errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.IMPORTEE_RESOLUTION_FROM_IMPORTER_FAILED, {
                        messageArgs: [importee, importer],
                        origin: { filename: importer }
                    });
                }
                throw errors_1.generateCompilerError(errors_1.ModuleResolutionErrors.IMPORTEE_RESOLUTION_FAILED, {
                    messageArgs: [importee],
                    origin: { filename: importer }
                });
            }
            return absPath;
        },
        load(id) {
            if (id === IMPLICIT_DEFAULT_CSS_PATH) {
                return EMPTY_IMPLICIT_CSS_CONTENT;
            }
            if (id === IMPLICIT_DEFAULT_HTML_PATH) {
                return EMPTY_IMPLICIT_HTML_CONTENT;
            }
            return path.extname(id) === ".css" && !fileExists(id, options)
                ? EMPTY_IMPLICIT_CSS_CONTENT
                : readFile(id, options);
        }
    };
}
exports.default = default_1;
//# sourceMappingURL=module-resolver.js.map
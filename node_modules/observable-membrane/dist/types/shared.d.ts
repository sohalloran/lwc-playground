declare const isArray: (arg: any) => arg is any[];
declare const getPrototypeOf: (o: any) => any, ObjectCreate: {
    (o: object | null): any;
    (o: object | null, properties: PropertyDescriptorMap & ThisType<any>): any;
}, ObjectDefineProperty: {
    (o: any, p: string, attributes: PropertyDescriptor & ThisType<any>): any;
    (o: any, propertyKey: PropertyKey, attributes: PropertyDescriptor): any;
}, ObjectDefineProperties: (o: any, properties: PropertyDescriptorMap & ThisType<any>) => any, isExtensible: (o: any) => boolean, getOwnPropertyDescriptor: {
    (o: any, p: string): PropertyDescriptor | undefined;
    (o: any, propertyKey: PropertyKey): PropertyDescriptor | undefined;
}, getOwnPropertyNames: (o: any) => string[], getOwnPropertySymbols: (o: any) => symbol[], preventExtensions: <T>(o: T) => T;
declare const ArrayPush: (...items: any[]) => number, ArrayConcat: {
    (...items: ConcatArray<any>[]): any[];
    (...items: any[]): any[];
}, ArrayMap: <U>(callbackfn: (value: any, index: number, array: any[]) => U, thisArg?: any) => U[];
export { ArrayPush, ArrayConcat, ArrayMap, isArray, getPrototypeOf, ObjectCreate, ObjectDefineProperty, ObjectDefineProperties, isExtensible, getOwnPropertyDescriptor, getOwnPropertyNames, getOwnPropertySymbols, preventExtensions };
export declare function toString(obj: any): string;
export declare function isUndefined(obj: any): obj is undefined;
export declare const TargetSlot: unique symbol;
export declare const unwrap: (replicaOrAny: any) => any;
export declare function isObservable(value: any): boolean;
export declare function isObject(obj: any): obj is object;
